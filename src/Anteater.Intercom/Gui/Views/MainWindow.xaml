<Window x:Class="Anteater.Intercom.Gui.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:local="clr-namespace:Anteater.Intercom.Gui.Views"
        Title="Home Guard"
        Background="{StaticResource BlackBrush}"        
        Icon="/Assets/Icon.ico"
        Width="800"
        Height="600"       
        ResizeMode="CanResizeWithGrip"
        WindowStartupLocation="CenterScreen">
    <Grid>
        <Grid Visibility="{Binding Path=IsOverlayVisible, Converter={StaticResource BoolToVisibility}}" Panel.ZIndex="1000" Grid.ColumnSpan="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="25*" />
                <ColumnDefinition Width="2*" />
                <ColumnDefinition Width="1*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="25*" />
                <RowDefinition Height="4*" />
                <RowDefinition Height="1*" />
            </Grid.RowDefinitions>
            <Grid Grid.Column="1" Grid.Row="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="1*" />
                    <RowDefinition Height="3*" />
                    <RowDefinition Height="1*" />
                    <RowDefinition Height="3*" />
                    <RowDefinition Height="17*" />
                </Grid.RowDefinitions>
                <Button Style="{StaticResource Button}" Grid.Row="1" VerticalAlignment="Center" HorizontalAlignment="Center" DataContext="{Binding DataContext, ElementName=VideoPlayer}" Command="{Binding AudioStateCommand}" IsEnabled="{Binding DataContext.IsActive, ElementName=Intercom, Converter={StaticResource BoolInverse}}">
                    <Image>
                        <Image.Style>
                            <Style TargetType="{x:Type Image}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsSoundMuted}" Value="{x:Null}">
                                        <Setter Property="Source" Value="/Assets/VolumeMute.png"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsSoundMuted}" Value="True">
                                        <Setter Property="Source" Value="/Assets/VolumeMute.png"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsSoundMuted}" Value="False">
                                        <Setter Property="Source" Value="/Assets/VolumeUp.png"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>
                </Button>
                <Button Style="{StaticResource Button}" Grid.Row="3" VerticalAlignment="Center" HorizontalAlignment="Center" DataContext="{Binding DataContext, ElementName=AlarmRinger}" Command="{Binding ChangeMutedStateCommand}">
                    <Image>
                        <Image.Style>
                            <Style TargetType="{x:Type Image}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsSoundMuted}" Value="{x:Null}">
                                        <Setter Property="Source" Value="/Assets/BellRingOn.png"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsSoundMuted}" Value="True">
                                        <Setter Property="Source" Value="/Assets/BellRingOff.png"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsSoundMuted}" Value="False">
                                        <Setter Property="Source" Value="/Assets/BellRingOn.png"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>
                </Button>
            </Grid>
            <Grid Grid.ColumnSpan="2" Grid.Row="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="3*" />
                    <ColumnDefinition Width="2*" />
                    <ColumnDefinition Width="3*" />
                </Grid.ColumnDefinitions>
                <local:Intercom x:Name="Intercom" Grid.Column="1">
                    <b:Interaction.Triggers>
                        <b:PropertyChangedTrigger Binding="{Binding IsActive}">
                            <b:InvokeCommandAction Command="{Binding DataContext.ChangeOverlayTimerStateCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" CommandParameter="{Binding IsActive}" />
                        </b:PropertyChangedTrigger>
                        <b:PropertyChangedTrigger Binding="{Binding IsActive}">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding IsActive}" RightOperand="True" Operator="Equal" />
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <b:InvokeCommandAction Command="{Binding DataContext.ChangeActiveStateCommand, ElementName=AlarmRinger}" CommandParameter="{StaticResource False}" />
                        </b:PropertyChangedTrigger>
                        <b:PropertyChangedTrigger Binding="{Binding IsDoorLocked}">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding IsDoorLocked}" RightOperand="False" Operator="Equal" />
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <b:InvokeCommandAction Command="{Binding DataContext.ChangeActiveStateCommand, ElementName=AlarmRinger}" CommandParameter="{StaticResource False}" />
                        </b:PropertyChangedTrigger>
                    </b:Interaction.Triggers>
                </local:Intercom>
                <local:AlarmRinger x:Name="AlarmRinger" Grid.Column="3" VerticalAlignment="Center" HorizontalAlignment="Center">
                    <b:Interaction.Triggers>
                        <b:PropertyChangedTrigger Binding="{Binding IsActive}">
                            <b:InvokeCommandAction Command="{Binding DataContext.ChangeOverlayTimerStateCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" CommandParameter="{Binding IsActive}" />
                        </b:PropertyChangedTrigger>
                    </b:Interaction.Triggers>
                </local:AlarmRinger>
            </Grid>
        </Grid>
        <local:VideoPlayer x:Name="VideoPlayer" Grid.ColumnSpan="2">
            <b:Interaction.Triggers>
                <b:PropertyChangedTrigger Binding="{Binding DataContext.IsOverlayVisible, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}">
                    <b:InvokeCommandAction Command="{Binding VideoStateCommand}" CommandParameter="{Binding DataContext.IsOverlayVisible, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Converter={StaticResource BoolInverse}}" />
                </b:PropertyChangedTrigger>
            </b:Interaction.Triggers>
        </local:VideoPlayer>
    </Grid>
    <b:Interaction.Triggers>
        <b:EventTrigger EventName="ContentRendered">
            <b:ChangePropertyAction TargetObject="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" PropertyName="IsOverlayVisible" Value="{StaticResource True}" />
            <b:ChangePropertyAction TargetObject="{Binding DataContext, ElementName=VideoPlayer}" PropertyName="IsSoundMuted" Value="{StaticResource True}" />
        </b:EventTrigger>
        <b:EventTrigger EventName="Activated">
            <b:CallMethodAction MethodName="BringToForeground" />
            <b:InvokeCommandAction Command="{Binding ChangeOverlayStateCommand}" CommandParameter="{StaticResource True}" />
        </b:EventTrigger>
        <b:EventTrigger EventName="MouseDoubleClick">
            <b:InvokeCommandAction Command="{Binding ChangeWindowStateCommand}" />
        </b:EventTrigger>
        <b:EventTrigger EventName="MouseLeftButtonDown">
            <b:InvokeCommandAction Command="{Binding ChangeOverlayStateCommand}" CommandParameter="{StaticResource True}" />
        </b:EventTrigger>
        <b:PropertyChangedTrigger Binding="{Binding IsMaximized}">
            <b:Interaction.Behaviors>
                <b:ConditionBehavior>
                    <b:ConditionalExpression>
                        <b:ComparisonCondition LeftOperand="{Binding IsMaximized}" RightOperand="True" Operator="Equal" />
                    </b:ConditionalExpression>
                </b:ConditionBehavior>
            </b:Interaction.Behaviors>
            <b:ChangePropertyAction PropertyName="WindowState" Value="Maximized" />
            <b:ChangePropertyAction PropertyName="WindowStyle" Value="None" />
        </b:PropertyChangedTrigger>
        <b:PropertyChangedTrigger Binding="{Binding IsMaximized}">
            <b:Interaction.Behaviors>
                <b:ConditionBehavior>
                    <b:ConditionalExpression>
                        <b:ComparisonCondition LeftOperand="{Binding IsMaximized}" RightOperand="False" Operator="Equal" />
                    </b:ConditionalExpression>
                </b:ConditionBehavior>
            </b:Interaction.Behaviors>
            <b:ChangePropertyAction PropertyName="WindowState" Value="Normal" />
            <b:ChangePropertyAction PropertyName="WindowStyle" Value="SingleBorderWindow" />
        </b:PropertyChangedTrigger>
    </b:Interaction.Triggers>
</Window>

